data= read.csv("banknotes.csv")
fake= data[data$conterfeit==0,]
real= data[data$conterfeit==1,]
View(data)
View(data)
data= read.csv("banknotes.csv")
fake= data[data$conterfeit==0,]
real= data[data$conterfeit==1,]
### MANOVA
### check for condition:
library(MVN)
mvn(data)
#### Hypothesis: H0: mu_fake = mu_real , HA: mu_fake different mu_real
mvn(real)
mvn(fake)
print(rean)
print(real)
View(fake)
View(fake)
data= read.csv("banknotes.csv")
fake= data[data$conterfeit==0,-1]
real= data[data$conterfeit==1,-1]
### MANOVA
### check for condition:
library(MVN)
mvn(data)
mvn(fake)
mvn(real)
#### Hypothesis: H0: mu_fake = mu_real , HA: mu_fake different mu_real
### check for equal variance
library(biotools)
boxM(data[,-1], data$conterfeit)
View(data)
attach(data)
summary(manova(cbind(Lenght, Left, Right, Bottom, Top, Diagonal)~conterfeit))
summary(manova(cbind(Length, Left, Right, Bottom, Top, Diagonal)~conterfeit))
summary(manova(cbind(Length, Left, Right, Bottom, Top, Diagonal)~conterfeit), test = "wilks")
summary(manova(cbind(Length, Left, Right, Bottom, Top, Diagonal)~conterfeit), test = "Wilks")
fake_train= fake_train[createDataPartition(p = 0.8, list = FALSE), ]
fake_train= fake[createDataPartition(p = 0.8, list = FALSE), ]
training.samples <- fake %>% createDataPartition(p = 0.8, list = FALSE)
fake %>% createDataPartition(p = 0.8, list = FALSE)
createDataPartition(fake,p = 0.8, list = FALSE)
createDataPartition
library(caret)
createDataPartition(p = 0.8, list = FALSE)
test.fake =  fake[-training.samples,]
training.samples <- fake %>% createDataPartition(p = 0.8, list = FALSE)
train.fake=  fake[training.samples, ]
test.fake =  fake[-training.samples,]
test.fake =  fake[-training.samples, ]
library(caret)
training.samples <- fake %>% createDataPartition(p = 0.8, list = FALSE)
training.samples <-  createDataPartition(fake, p = 0.8, list = FALSE)
train.fake=  fake[training.samples, ]
View(train.fake)
test.fake =  fake[-training.samples, ]
sample = sample.int(n = nrow(titanic),size = round(.75*nrow(titanic)),
replace = FALSE)
train.fake=  data[sample, ]
sample = sample.int(n = nrow(titanic),size = round(.75*nrow(titanic)),
replace = FALSE)
sample = sample.int(n = nrow(data),size = round(.75*nrow(data)),
replace = FALSE)
train.data=  data[sample, ]
test.data =  data[-sample, ]
View(train.fake)
train.data=  data[sample, ]
test.data =  data[-sample, ]
data= read.csv("banknotes.csv")
fake= data[data$conterfeit==0,-1]
real= data[data$conterfeit==1,-1]
### MANOVA
### check for condition:
library(MVN)
mvn(data)
mvn(fake)
mvn(real)
### not multivariate normal
### check for equal variance
library(biotools)
boxM(data[,-1], data$conterfeit)
### not equal variance
#### hence not meet the criteria for MANOVA
#### apply MANOVA even if the criteria is not met.
attach(data)
summary(manova(cbind(Length, Left, Right, Bottom, Top, Diagonal)~conterfeit), test = "Wilks")
### there is a different in the mean of the type of money.
### However, Manova is not a good test for the data due to insufficent criteria is met.
### Logistic
set.seed(1)
sample = sample.int(n = nrow(data),size = round(.75*nrow(data)),
replace = FALSE)
train.data=  data[sample, ]
test.data =  data[-sample, ]
View(test.data)
View(train.data)
install.packages(ppsr)
install.packages("ppsr")
install.packages("ppsr")
### Logistic
library(ppsr)
View(data)
available_algorithms()
score(data, x=data[,-1], y= data$conterfeit, algorithm = logistic_reg)
score(data, x=data[,-1], y= data$conterfeit, algorithm = "logistic_reg")
score(data, x=data[,2], y= data$conterfeit, algorithm = "logistic_reg")
score(data, x=data$Length, y= data$conterfeit, algorithm = "logistic_reg")
logistic_length = glm(Length ~ conterfeit, family = "binomial",
data = train.data)
logistic_length = glm(conterfeit ~ Length, family = "binomial",
data = train.data)
summary(logistic_length)
predict(test.data,type = "response")
score(data, x=data[,-1], y= data$conterfeit, algorithm = "logistic_reg")
score(data, x=data$Length, y= data$conterfeit, algorithm = "logistic_reg")
score(data, x=data$Length, y= data$conterfeit, algorithm = "logistic_reg")
head(data)
score(data, x=data$Left, y= data$conterfeit, algorithm = "logistic_reg")
score(t(data), x=data$Left, y= data$conterfeit, algorithm = "logistic_reg")
t(data)
score(data, data$Left,  data$conterfeit, algorithm = "logistic_reg")
